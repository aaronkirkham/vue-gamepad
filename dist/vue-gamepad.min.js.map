{"version":3,"file":"vue-gamepad.min.js","sources":["../lib/utils.js","../lib/button-mapping.js","../lib/gamepad.js","../lib/index.js"],"sourcesContent":["/**\r\n * helper function to build all nested properties similar to lodash's _.set function\r\n *\r\n * set(object, ['x', 'y', 'z'], 'default')\r\n * console.log(object.x.y.z);\r\n *  => default\r\n *\r\n * @param {object} obj object to build properties for\r\n * @param {array} keys list of keys to nest\r\n * @param {any} value value to set\r\n */\r\nexport function set(obj, keys, value) {\r\n  /* eslint-disable no-param-reassign */\r\n  obj[keys[0]] = obj[keys[0]] || {};\r\n  const tmp = obj[keys[0]];\r\n\r\n  if (keys.length > 1) {\r\n    keys.shift();\r\n    set(tmp, keys, value);\r\n  } else {\r\n    obj[keys[0]] = value;\r\n  }\r\n\r\n  return obj;\r\n}\r\n\r\n/**\r\n * helper function to get value from a nest object similar to lodash's _.get function\r\n *\r\n * get({ x: { y: 0 } }, ['x', 'y', 'z'], [])\r\n * => []\r\n *\r\n * @param {object} obj object to get properties from\r\n * @param {array} keys list of keys to use\r\n * @param {any} [def=undefined] default value if nothing was found\r\n */\r\nexport function get(obj, keys, def = undefined) {\r\n  const tmp = obj[keys[0]];\r\n\r\n  if (keys.length > 1 && tmp) {\r\n    keys.shift();\r\n    return get(tmp, keys) || def;\r\n  }\r\n\r\n  return tmp || def;\r\n}\r\n","export const ButtonNames = [\r\n  'button-a', 'button-b', 'button-x', 'button-y',\r\n  'shoulder-left', 'shoulder-right', 'trigger-left', 'trigger-right',\r\n  'button-select', 'button-start',\r\n  'left-stick-in', 'right-stick-in',\r\n  'button-dpad-up', 'button-dpad-down', 'button-dpad-left', 'button-dpad-right',\r\n  'vendor',\r\n];\r\n\r\nexport const PositiveAxisNames = [\r\n  'left-analog-right', 'left-analog-down',\r\n  'right-analog-right', 'right-analog-down',\r\n];\r\n\r\nexport const NegativeAxisNames = [\r\n  'left-analog-left', 'left-analog-up',\r\n  'right-analog-left', 'right-analog-up',\r\n];\r\n\r\n/**\r\n * get name of axis from input value\r\n * @param {number} axis axis id\r\n * @param {number} value current input value\r\n * @return {string} string representing the axis name\r\n */\r\nexport function getAxisNameFromValue(axis, value) {\r\n  if (value > 0) return PositiveAxisNames[axis];\r\n  return NegativeAxisNames[axis];\r\n}\r\n\r\n/**\r\n * get the name of both position and negative names from an axis\r\n * @param {number} axis axis is\r\n * @return {array} array containing both position and negative axis names\r\n */\r\nexport function getAxisNames(axis) {\r\n  return [PositiveAxisNames[axis], NegativeAxisNames[axis]];\r\n}\r\n","import { set, get } from './utils';\r\nimport { getAxisNameFromValue, getAxisNames } from './button-mapping';\r\n\r\nexport default function (Vue, options = {}) {\r\n  return class Gamepad {\r\n    constructor() {\r\n      this.holding = {};\r\n      this.events = {};\r\n      this.layer = 0;\r\n      this.layers = {};\r\n\r\n      window.addEventListener('gamepadconnected', this.padConnected.bind(this));\r\n      window.addEventListener('gamepaddisconnected', this.padDisconnected.bind(this));\r\n\r\n      this.animationFrame = requestAnimationFrame(this.run.bind(this));\r\n    }\r\n\r\n    /**\r\n     * gamepad was connected\r\n     */\r\n    padConnected() {\r\n      document.body.classList.add('gamepad-connected');\r\n    }\r\n\r\n    /**\r\n     * gamepad was disconnected\r\n     */\r\n    padDisconnected() {\r\n      if (this.getGamepads().length === 0) {\r\n        document.body.classList.remove('gamepad-connected');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * add an event handler\r\n     * @param {string} event name of the button event\r\n     * @param {object} modifiers vue binding modifiers\r\n     * @param {function} callback function to trigger\r\n     * @param {object} vnode vue directive vnode\r\n     */\r\n    addListener(event, modifiers, callback, vnode = null) {\r\n      const action = modifiers.released ? 'released' : 'pressed';\r\n      const repeat = !!modifiers.repeat;\r\n\r\n      // if we don't already have an array initialised for the current event\r\n      // do it now\r\n      const events = get(this.events, [this.layer, action, event], []);\r\n      if (events.length === 0) {\r\n        set(this.events, [this.layer, action, event], []);\r\n      }\r\n\r\n      // register the event\r\n      this.events[this.layer][action][event].push({ vnode, repeat, callback });\r\n\r\n      // inject classes\r\n      if (options.injectClasses && vnode && vnode.elm) {\r\n        vnode.elm.classList.add('v-gamepad', `v-gamepad--${event}`);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * remove an event handler\r\n     * @param {string} event name of the button event\r\n     * @param {object} modifiers vue binding modifiers\r\n     * @param {function} callback trigger function\r\n     */\r\n    removeListener(event, modifiers, callback) {\r\n      const action = modifiers.released ? 'released' : 'pressed';\r\n\r\n      // get a list of all events for the current action\r\n      let events = get(this.events, [this.layer, action, event], []);\r\n      if (events.length > 0) {\r\n        // filter any events which have same callback\r\n        events = events.filter((e) => e.callback !== callback);\r\n\r\n        // if we have any remaining events after the filter, update the array\r\n        // otherwise delete the object\r\n        if (events.length > 0) {\r\n          set(this.events, [this.layer, action, event], events);\r\n        } else {\r\n          delete this.events[this.layer][action][event];\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * switch to a new layer\r\n     * @param {number} layer layer number to switch to\r\n     */\r\n    switchToLayer(layer) {\r\n      if (this.layer !== layer) {\r\n        // keep track of the old layer before we switch\r\n        this.layers[layer] = this.layer;\r\n        this.layer = layer;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * remove a layer, delete the registered events and switch back to the old layer\r\n     * @param {number} layer layer number to remove\r\n     */\r\n    removeLayer(layer) {\r\n      // switch back to the previous layer\r\n      this.layer = this.layers[layer];\r\n      delete this.layers[layer];\r\n\r\n      // delete the layer events\r\n      delete this.events[layer];\r\n    }\r\n\r\n    /**\r\n     * main loop\r\n     */\r\n    run() {\r\n      this.getGamepads().forEach((pad) => {\r\n        // check gamepad buttons\r\n        pad.buttons.forEach((button, index) => {\r\n          const name = options.buttonNames[index];\r\n\r\n          // button is pressed\r\n          if (button.pressed) {\r\n            const events = get(this.events, [this.layer, 'pressed', name], []);\r\n\r\n            if (events.length > 0) {\r\n              const event = events[events.length - 1];\r\n              const now = Date.now();\r\n              const initial = typeof this.holding[name] === 'undefined';\r\n\r\n              // button was just pressed, or is repeating\r\n              if (initial\r\n                  || (event.repeat\r\n                      && (now - this.holding[name]) >= options.buttonRepeatTimeout)) {\r\n                this.holding[name] = now;\r\n                if (initial) {\r\n                  this.holding[name] += (options.buttonInitialTimeout\r\n                                         - options.buttonRepeatTimeout);\r\n                }\r\n                event.callback.call();\r\n              }\r\n            }\r\n          // button was released\r\n          } else if (!button.pressed && typeof this.holding[name] !== 'undefined') {\r\n            delete this.holding[name];\r\n\r\n            const events = get(this.events, [this.layer, 'released', name], []);\r\n            if (events.length > 0) {\r\n              const event = events[events.length - 1];\r\n              event.callback.call();\r\n            }\r\n          }\r\n        });\r\n\r\n        // check gamepad axis\r\n        pad.axes.forEach((value, index) => {\r\n          if (value >= options.analogThreshold || value <= -(options.analogThreshold)) {\r\n            const name = getAxisNameFromValue(index, value);\r\n            const events = get(this.events, [this.layer, 'pressed', name], []);\r\n\r\n            if (events.length > 0) {\r\n              const event = events[events.length - 1];\r\n              const now = Date.now();\r\n              const initial = typeof this.holding[name] === 'undefined';\r\n\r\n              // axis was just moved, or is repeating\r\n              if (initial\r\n                  || (event.repeat\r\n                      && (now - this.holding[name]) >= options.buttonRepeatTimeout)) {\r\n                this.holding[name] = now;\r\n                if (initial) {\r\n                  this.holding[name] += (options.buttonInitialTimeout\r\n                                         - options.buttonRepeatTimeout);\r\n                }\r\n                event.callback.call();\r\n              }\r\n            }\r\n          } else {\r\n            const names = getAxisNames(index);\r\n\r\n            // trigger the release event if this axis was previously pressed\r\n            names.filter((name) => this.holding[name])\r\n              .forEach((name) => {\r\n                delete this.holding[name];\r\n\r\n                const events = get(this.events, [this.layer, 'released', name], []);\r\n                if (events.length > 0) {\r\n                  const event = events[events.length - 1];\r\n                  event.callback.call();\r\n                }\r\n              });\r\n          }\r\n        });\r\n      });\r\n\r\n      this.animationFrame = requestAnimationFrame(this.run.bind(this));\r\n    }\r\n\r\n    /**\r\n     * get an array of active gamepads\r\n     * @return {array}\r\n     */\r\n    getGamepads() {\r\n      return Array.from(navigator.getGamepads()).filter((pad) => pad !== null);\r\n    }\r\n\r\n    /**\r\n     * helper function to test if a binding is valid\r\n     * @param {object} binding binding to test which includes arg & value\r\n     * @return {boolean}\r\n     */\r\n    isValidBinding(binding) {\r\n      return typeof binding.arg !== 'undefined' && (typeof binding.value === 'function' || (typeof binding.value === 'undefined' && typeof binding.expression === 'undefined'));\r\n    }\r\n  };\r\n}\r\n","import GamepadFactory from './gamepad';\r\nimport { ButtonNames } from './button-mapping';\r\n\r\nexport default {\r\n  /**\r\n   * install function\r\n   * @param {Vue} Vue\r\n   * @param {object} options\r\n   */\r\n  install(Vue, options = {}) {\r\n    // we need basic gamepad api support to work\r\n    if (!('getGamepads' in navigator)) {\r\n      console.error('vue-gamepad: your browser does not support the Gamepad API!');\r\n      return;\r\n    }\r\n\r\n    const DefaultOptions = {\r\n      analogThreshold: 0.5,\r\n      buttonNames: ButtonNames,\r\n      buttonRepeatTimeout: 200,\r\n      buttonInitialTimeout: 200,\r\n      injectClasses: true,\r\n    };\r\n\r\n    const Gamepad = GamepadFactory(Vue, { ...DefaultOptions, ...options });\r\n    const gamepad = new Gamepad();\r\n\r\n    /* eslint-disable no-param-reassign */\r\n    Vue.prototype.$gamepad = gamepad;\r\n\r\n    Vue.directive('gamepad', {\r\n      bind: (el, binding, vnode) => {\r\n        if (gamepad.isValidBinding(binding)) {\r\n          const callback = typeof binding.value !== 'undefined' ? binding.value : vnode.data.on.click;\r\n          gamepad.addListener(binding.arg, binding.modifiers, callback, vnode);\r\n        } else {\r\n          console.error(`invalid binding. '${binding.arg}' was not bound.`);\r\n        }\r\n      },\r\n      unbind: (el, binding, vnode) => {\r\n        if (gamepad.isValidBinding(binding)) {\r\n          const callback = typeof binding.value !== 'undefined' ? binding.value : vnode.data.on.click;\r\n          gamepad.removeListener(binding.arg, binding.modifiers, callback);\r\n        } else {\r\n          console.error(`invalid binding. '${binding.arg}' was not unbound.`);\r\n        }\r\n      },\r\n    });\r\n\r\n    Vue.directive('gamepad-layer', {\r\n      bind: (el, binding) => gamepad.switchToLayer(binding.value),\r\n      unbind: (el, binding) => gamepad.removeLayer(binding.value),\r\n    });\r\n  },\r\n};\r\n"],"names":["set","obj","keys","value","tmp","length","shift","get","def","undefined","ButtonNames","PositiveAxisNames","NegativeAxisNames","Vue","options","holding","events","layer","layers","window","addEventListener","this","padConnected","bind","padDisconnected","animationFrame","requestAnimationFrame","run","document","body","classList","add","getGamepads","remove","event","modifiers","callback","vnode","action","released","repeat","push","injectClasses","elm","filter","e","forEach","pad","buttons","button","index","name","buttonNames","pressed","_this","now","Date","initial","buttonRepeatTimeout","buttonInitialTimeout","call","axes","analogThreshold","axis","Array","from","navigator","binding","arg","expression","install","gamepad","GamepadFactory","prototype","$gamepad","directive","el","isValidBinding","data","on","click","addListener","console","error","unbind","removeListener","switchToLayer","removeLayer"],"mappings":"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"}