{"version":3,"file":"vue-gamepad.min.js","sources":["../lib/utils.js","../lib/button-mapping.js","../lib/gamepad.js","../lib/index.js"],"sourcesContent":["/**\n * helper function to build all nested properties similar to lodash's _.set function\n * \n * set(object, ['x', 'y', 'z'], 'default')\n * console.log(object.x.y.z);\n *  => default\n * \n * @param {object} obj object to build properties for\n * @param {array} keys list of keys to nest\n * @param {any} value value to set\n */\nexport function set(obj, keys, value) {\n  obj[keys[0]] = obj[keys[0]] || {};\n  const tmp = obj[keys[0]];\n\n  if (keys.length > 1) {\n    keys.shift();\n    set(tmp, keys, value);\n  }\n  else {\n    obj[keys[0]] = value;\n  }\n\n  return obj;\n}\n\n/**\n * helper function to get value from a nest object similar to lodash's _.get function\n * \n * get({ x: { y: 0 } }, ['x', 'y', 'z'], [])\n * => []\n * \n * @param {object} obj object to get properties from\n * @param {array} keys list of keys to use\n * @param {any} [def=undefined] default value if nothing was found\n */\nexport function get(obj, keys, def = undefined) {\n  const tmp = obj[keys[0]];\n\n  if (keys.length > 1 && tmp) {\n    keys.shift();\n    return get(tmp, keys) || def;\n  }\n\n  return tmp || def;\n}","export const ButtonNames = [\n  'button-a', 'button-b', 'button-x', 'button-y',\n  'shoulder-left', 'shoulder-right', 'trigger-left', 'trigger-right',\n  'button-select', 'button-start',\n  'left-stick-in', 'right-stick-in',\n  'button-dpad-up', 'button-dpad-down', 'button-dpad-left', 'button-dpad-right',\n  'vendor'\n];\n\nexport const PositiveAxisNames = [\n  'left-analog-right', 'left-analog-down',\n  'right-analog-right', 'right-analog-down'\n];\n\nexport const NegativeAxisNames = [\n  'left-analog-left', 'left-analog-up',\n  'right-analog-left', 'right-analog-up'\n];\n\n/**\n * get name of axis from input value\n * @param {number} axis axis id\n * @param {number} value current input value\n * @return {string} string representing the axis name\n */\nexport function getAxisNameFromValue(axis, value) {\n  if (value > 0) return PositiveAxisNames[axis];\n  else if (value < 0) return NegativeAxisNames[axis];\n\n  return undefined;\n}\n\n/**\n * get the name of both position and negative names from an axis\n * @param {number} axis axis is\n * @return {array} array containing both position and negative axis names\n */\nexport function getAxisNames(axis) {\n  return [PositiveAxisNames[axis], NegativeAxisNames[axis]];\n}","import { set, get } from './utils';\nimport { getAxisNameFromValue, getAxisNames } from './button-mapping';\n\nexport default function (Vue, options = {}) {\n  return class Gamepad {\n    constructor() {\n      this.holding = {};\n      this.events = {};\n      this.layer = 0;\n      this.layers = {};\n\n      window.addEventListener('gamepadconnected', this.padConnected.bind(this));\n      window.addEventListener('gamepaddisconnected', this.padDisconnected.bind(this));\n\n      this.animationFrame = requestAnimationFrame(this.run.bind(this));\n    }\n\n    /**\n     * gamepad was connected\n     * @param {GamepadEvent} event \n     */\n    padConnected(event) {\n      document.body.classList.add('gamepad-connected');\n    }\n\n    /**\n     * gamepad was disconnected\n     * @param {GamepadEvent} event \n     */\n    padDisconnected(event) {\n      if (this.getGamepads().length === 0) {\n        document.body.classList.remove('gamepad-connected');\n      }\n    }\n\n    /**\n     * add an event handler\n     * @param {string} event name of the button event\n     * @param {object} modifiers vue binding modifiers\n     * @param {function} callback function to trigger\n     * @param {object} vnode vue directive vnode\n     */\n    addListener(event, modifiers, callback, vnode = null) {\n      const action = modifiers.released ? 'released' : 'pressed';\n      const repeat = !!modifiers.repeat;\n\n      this.debug(`listening for '${event}' '${action}' (repeat? ${repeat}) on layer ${this.layer}...`);\n\n      // if we don't already have an array initialised for the current event\n      // do it now\n      const events = get(this.events, [this.layer, action, event], []);\n      if (events.length === 0) {\n        set(this.events, [this.layer, action, event], []);\n      }\n\n      // register the event\n      this.events[this.layer][action][event].push({ vnode, repeat, callback });\n\n      // inject classes\n      if (options.injectClasses && vnode && vnode.elm) {\n        vnode.elm.classList.add('v-gamepad', `v-gamepad--${event}`);\n      }\n    }\n\n    /**\n     * remove an event handler\n     * @param {string} event name of the button event\n     * @param {object} modifiers vue binding modifiers\n     * @param {function} callback trigger function\n     */\n    removeListener(event, modifiers, callback) {\n      const action = modifiers.released ? 'released' : 'pressed';\n      this.debug(`removing listener for '${event}' '${action}' on layer ${this.layer}...`);\n\n      // get a list of all events for the current action\n      let events = get(this.events, [this.layer, action, event], []);\n      if (events.length > 0) {\n        // filter any events which have same callback\n        events = events.filter(event => event.callback !== callback);\n\n        // if we have any remaining events after the filter, update the array\n        // otherwise delete the object\n        if (events.length > 0) {\n          set(this.events, [this.layer, action, event], events);\n        }\n        else {\n          delete this.events[this.layer][action][event];\n        }\n      }\n    }\n\n    /**\n     * switch to a new layer\n     * @param {number} layer layer number to switch to\n     */\n    switchToLayer(layer) {\n      if (this.layer != layer) {\n        // keep track of the old layer before we switch\n        this.layers[layer] = this.layer;\n        this.layer = layer;\n\n        this.debug(`switched to layer ${this.layer}.`);\n      }\n    }\n\n    /**\n     * remove a layer, delete the registered events and switch back to the old layer\n     * @param {number} layer layer number to remove\n     */\n    removeLayer(layer) {\n      // switch back to the previous layer\n      this.layer = this.layers[layer];\n      delete this.layers[layer];\n\n      // delete the layer events\n      delete this.events[layer];\n\n      this.debug(`switched back to layer ${this.layer}.`);\n    }\n\n    /**\n     * main loop\n     */\n    run() {\n      this.getGamepads().forEach(pad => {\n        // check gamepad buttons\n        pad.buttons.forEach((button, index) => {\n          const name = options.buttonNames[index];\n\n          // button is pressed\n          if (button.pressed) {\n            const now = Date.now();\n            const events = get(this.events, [this.layer, 'pressed', name], []);\n\n            if (events.length > 0) {\n              const event = events[events.length - 1];\n\n              // button was just pressed, or is repeating\n              if (typeof this.holding[name] === 'undefined' || (event.repeat && (now - this.holding[name]) >= options.buttonRepeatTimeout)) {\n                this.holding[name] = now;\n                event.callback.call();\n              }\n            }\n          }\n          // button was released\n          else if (!button.pressed && typeof this.holding[name] !== 'undefined') {\n            delete this.holding[name];\n\n            const events = get(this.events, [this.layer, 'released', name], []);\n            if (events.length > 0) {\n              const event = events[events.length - 1];\n              event.callback.call();\n            }\n          }\n        });\n\n        // check gamepad axis\n        pad.axes.forEach((value, index) => {\n          if (value >= options.analogThreshold || value <= -(options.analogThreshold)) {\n            const name = getAxisNameFromValue(index, value);\n            const events = get(this.events, [this.layer, 'pressed', name], []);\n\n            if (events.length > 0) {\n              const event = events[events.length - 1];\n              const now = Date.now();\n\n              // axis was just moved, or is repeating\n              if (typeof this.holding[name] === 'undefined' || (event.repeat && (now - this.holding[name]) >= options.buttonRepeatTimeout)) {\n                this.holding[name] = now;\n                event.callback.call();\n              }\n            }\n          }\n          else {\n            const names = getAxisNames(index);\n\n            // trigger the release event if this axis was pressed\n            names.filter(name => this.holding[name])\n              .forEach(name => {\n                delete this.holding[name];\n\n                const events = get(this.events, [this.layer, 'released', name], []);\n                if (events.length > 0) {\n                  const event = events[events.length - 1];\n                  event.callback.call();\n                }\n              });\n          }\n        });\n      });\n\n      this.animationFrame = requestAnimationFrame(this.run.bind(this));\n    }\n\n    /**\n     * get an array of active gamepads\n     * @return {array}\n     */\n    getGamepads() {\n      return Array.from(navigator.getGamepads()).filter(pad => pad !== null);\n    }\n\n    /**\n     * helper function to test if a binding is valid\n     * @param {object} binding binding to test which includes arg & value\n     * @return {boolean}\n     */\n    isValidBinding(binding) {\n      return typeof binding.arg !== 'undefined' &&\n            (typeof binding.value === 'function' || (typeof binding.value === 'undefined' && typeof binding.expression === 'undefined'));\n    }\n\n    debug(...args) {\n      if (!options.silent) {\n        console.log('%cvue-gamepad', 'background:#fc0;color:#000', ...args);\n      }\n    }\n\n    error(...args) {\n      console.error('%cvue-gamepad', 'background:#fc0;color:#000', ...args);\n    }\n  }\n}","import GamepadFactory from './gamepad';\nimport { ButtonNames } from './button-mapping';\n\nexport default {\n  /**\n   * install function\n   * @param {Vue} Vue \n   * @param {object} options \n   */\n  install(Vue, options = {}) {\n    // we need basic gamepad api support to work\n    if (!('getGamepads' in navigator)) {\n      console.error(`vue-gamepad: your browser does not support the Gamepad API!`);\n      return false;\n    }\n\n    const DefaultOptions = {\n      analogThreshold: 0.5,\n      buttonNames: ButtonNames,\n      buttonRepeatTimeout: 200,\n      injectClasses: true,\n      silent: true,\n    };\n\n    const Gamepad = GamepadFactory(Vue, { ...DefaultOptions, ...options });\n    const gamepad = new Gamepad();\n\n    Vue.prototype.$gamepad = gamepad;\n\n    Vue.directive('gamepad', {\n      bind: (el, binding, vnode) => {\n        if (gamepad.isValidBinding(binding)) {\n          const callback = typeof binding.value !== 'undefined' ? binding.value : vnode.data.on.click;\n          gamepad.addListener(binding.arg, binding.modifiers, callback, vnode);\n        }\n        else {\n          gamepad.error(`invalid binding. '${binding.arg}' was not bound.`);\n        }\n      },\n      unbind: (el, binding, vnode) => {\n        if (gamepad.isValidBinding(binding)) {\n          const callback = typeof binding.value !== 'undefined' ? binding.value : vnode.data.on.click;\n          gamepad.removeListener(binding.arg, binding.modifiers, callback);\n        }\n        else {\n          gamepad.error(`invalid binding. '${binding.arg}' was not unbound.`);\n        }\n      },\n    });\n\n    Vue.directive('gamepad-layer', {\n      bind: (el, binding, vnode) => gamepad.switchToLayer(binding.value),\n      unbind: (el, binding) => gamepad.removeLayer(binding.value),\n    });\n  }\n}"],"names":["set","obj","keys","value","tmp","length","shift","get","def","undefined","ButtonNames","PositiveAxisNames","NegativeAxisNames","Vue","options","holding","events","layer","layers","window","addEventListener","this","padConnected","bind","padDisconnected","animationFrame","requestAnimationFrame","run","event","document","body","classList","add","getGamepads","remove","modifiers","callback","vnode","action","released","repeat","debug","push","injectClasses","elm","filter","forEach","pad","buttons","button","index","name","buttonNames","pressed","now","Date","_this","buttonRepeatTimeout","call","axes","analogThreshold","axis","Array","from","navigator","binding","arg","expression","silent","args","console","log","error","install","gamepad","GamepadFactory","prototype","$gamepad","directive","el","isValidBinding","data","on","click","addListener","unbind","removeListener","switchToLayer","removeLayer"],"mappings":"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"}