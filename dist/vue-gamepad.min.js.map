{"version":3,"file":"vue-gamepad.min.js","sources":["../lib/utils.js","../lib/button-mapping.js","../lib/gamepad.js","../lib/index.js"],"sourcesContent":["/**\n * helper function to build all nested properties similar to lodash's _.set function\n *\n * set(object, ['x', 'y', 'z'], 'default')\n * console.log(object.x.y.z);\n *  => default\n *\n * @param {object} obj object to build properties for\n * @param {array} keys list of keys to nest\n * @param {any} value value to set\n */\nexport function set(obj, keys, value) {\n  /* eslint-disable no-param-reassign */\n  obj[keys[0]] = obj[keys[0]] || {};\n  const tmp = obj[keys[0]];\n\n  if (keys.length > 1) {\n    keys.shift();\n    set(tmp, keys, value);\n  } else {\n    obj[keys[0]] = value;\n  }\n\n  return obj;\n}\n\n/**\n * helper function to get value from a nest object similar to lodash's _.get function\n *\n * get({ x: { y: 0 } }, ['x', 'y', 'z'], [])\n * => []\n *\n * @param {object} obj object to get properties from\n * @param {array} keys list of keys to use\n * @param {any} [def=undefined] default value if nothing was found\n */\nexport function get(obj, keys, def = undefined) {\n  const tmp = obj[keys[0]];\n\n  if (keys.length > 1 && tmp) {\n    keys.shift();\n    return get(tmp, keys) || def;\n  }\n\n  return tmp || def;\n}\n","export const ButtonNames = [\n  'button-a', 'button-b', 'button-x', 'button-y',\n  'shoulder-left', 'shoulder-right', 'trigger-left', 'trigger-right',\n  'button-select', 'button-start',\n  'left-stick-in', 'right-stick-in',\n  'button-dpad-up', 'button-dpad-down', 'button-dpad-left', 'button-dpad-right',\n  'vendor',\n];\n\nexport const PositiveAxisNames = [\n  'left-analog-right', 'left-analog-down',\n  'right-analog-right', 'right-analog-down',\n];\n\nexport const NegativeAxisNames = [\n  'left-analog-left', 'left-analog-up',\n  'right-analog-left', 'right-analog-up',\n];\n\n/**\n * get name of axis from input value\n * @param {number} axis axis id\n * @param {number} value current input value\n * @return {string} string representing the axis name\n */\nexport function getAxisNameFromValue(axis, value) {\n  if (value > 0) return PositiveAxisNames[axis];\n  return NegativeAxisNames[axis];\n}\n\n/**\n * get the name of both position and negative names from an axis\n * @param {number} axis axis is\n * @return {array} array containing both position and negative axis names\n */\nexport function getAxisNames(axis) {\n  return [PositiveAxisNames[axis], NegativeAxisNames[axis]];\n}\n","import { set, get } from './utils';\nimport { getAxisNameFromValue, getAxisNames } from './button-mapping';\n\nexport default function (Vue, options = {}) {\n  return class Gamepad {\n    constructor() {\n      this.holding = {};\n      this.events = {};\n      this.layer = 0;\n      this.layers = {};\n\n      window.addEventListener('gamepadconnected', this.padConnected.bind(this));\n      window.addEventListener('gamepaddisconnected', this.padDisconnected.bind(this));\n\n      this.animationFrame = requestAnimationFrame(this.run.bind(this));\n    }\n\n    /**\n     * gamepad was connected\n     */\n    padConnected() {\n      document.body.classList.add('gamepad-connected');\n    }\n\n    /**\n     * gamepad was disconnected\n     */\n    padDisconnected() {\n      if (this.getGamepads().length === 0) {\n        document.body.classList.remove('gamepad-connected');\n      }\n    }\n\n    /**\n     * add an event handler\n     * @param {string} event name of the button event\n     * @param {object} modifiers vue binding modifiers\n     * @param {function} callback function to trigger\n     * @param {object} vnode vue directive vnode\n     */\n    addListener(event, modifiers, callback, vnode = null) {\n      const action = modifiers.released ? 'released' : 'pressed';\n      const repeat = !!modifiers.repeat;\n\n      // if we don't already have an array initialised for the current event\n      // do it now\n      const events = get(this.events, [this.layer, action, event], []);\n      if (events.length === 0) {\n        set(this.events, [this.layer, action, event], []);\n      }\n\n      // register the event\n      this.events[this.layer][action][event].push({ vnode, repeat, callback });\n\n      // inject classes\n      if (options.injectClasses && vnode && vnode.elm) {\n        vnode.elm.classList.add('v-gamepad', `v-gamepad--${event}`);\n      }\n    }\n\n    /**\n     * remove an event handler\n     * @param {string} event name of the button event\n     * @param {object} modifiers vue binding modifiers\n     * @param {function} callback trigger function\n     */\n    removeListener(event, modifiers, callback) {\n      const action = modifiers.released ? 'released' : 'pressed';\n\n      // get a list of all events for the current action\n      let events = get(this.events, [this.layer, action, event], []);\n      if (events.length > 0) {\n        // filter any events which have same callback\n        events = events.filter((e) => e.callback !== callback);\n\n        // if we have any remaining events after the filter, update the array\n        // otherwise delete the object\n        if (events.length > 0) {\n          set(this.events, [this.layer, action, event], events);\n        } else {\n          delete this.events[this.layer][action][event];\n        }\n      }\n    }\n\n    /**\n     * switch to a new layer\n     * @param {number} layer layer number to switch to\n     */\n    switchToLayer(layer) {\n      if (this.layer !== layer) {\n        // keep track of the old layer before we switch\n        this.layers[layer] = this.layer;\n        this.layer = layer;\n      }\n    }\n\n    /**\n     * remove a layer, delete the registered events and switch back to the old layer\n     * @param {number} layer layer number to remove\n     */\n    removeLayer(layer) {\n      // switch back to the previous layer\n      this.layer = this.layers[layer];\n      delete this.layers[layer];\n\n      // delete the layer events\n      delete this.events[layer];\n    }\n\n    /**\n     * main loop\n     */\n    run() {\n      this.getGamepads().forEach((pad) => {\n        // check gamepad buttons\n        pad.buttons.forEach((button, index) => {\n          const name = options.buttonNames[index];\n\n          // button is pressed\n          if (button.pressed) {\n            const events = get(this.events, [this.layer, 'pressed', name], []);\n\n            if (events.length > 0) {\n              const event = events[events.length - 1];\n              const now = Date.now();\n              const initial = typeof this.holding[name] === 'undefined';\n\n              // button was just pressed, or is repeating\n              if (initial\n                  || (event.repeat\n                      && (now - this.holding[name]) >= options.buttonRepeatTimeout)) {\n                this.holding[name] = now;\n                if (initial) {\n                  this.holding[name] += (options.buttonInitialTimeout\n                                         - options.buttonRepeatTimeout);\n                }\n                event.callback.call();\n              }\n            }\n          // button was released\n          } else if (!button.pressed && typeof this.holding[name] !== 'undefined') {\n            delete this.holding[name];\n\n            const events = get(this.events, [this.layer, 'released', name], []);\n            if (events.length > 0) {\n              const event = events[events.length - 1];\n              event.callback.call();\n            }\n          }\n        });\n\n        // check gamepad axis\n        pad.axes.forEach((value, index) => {\n          if (value >= options.analogThreshold || value <= -(options.analogThreshold)) {\n            const name = getAxisNameFromValue(index, value);\n            const events = get(this.events, [this.layer, 'pressed', name], []);\n\n            if (events.length > 0) {\n              const event = events[events.length - 1];\n              const now = Date.now();\n              const initial = typeof this.holding[name] === 'undefined';\n\n              // axis was just moved, or is repeating\n              if (initial\n                  || (event.repeat\n                      && (now - this.holding[name]) >= options.buttonRepeatTimeout)) {\n                this.holding[name] = now;\n                if (initial) {\n                  this.holding[name] += (options.buttonInitialTimeout\n                                         - options.buttonRepeatTimeout);\n                }\n                event.callback.call();\n              }\n            }\n          } else {\n            const names = getAxisNames(index);\n\n            // trigger the release event if this axis was previously pressed\n            names.filter((name) => this.holding[name])\n              .forEach((name) => {\n                delete this.holding[name];\n\n                const events = get(this.events, [this.layer, 'released', name], []);\n                if (events.length > 0) {\n                  const event = events[events.length - 1];\n                  event.callback.call();\n                }\n              });\n          }\n        });\n      });\n\n      this.animationFrame = requestAnimationFrame(this.run.bind(this));\n    }\n\n    /**\n     * get an array of active gamepads\n     * @return {array}\n     */\n    getGamepads() {\n      return Array.from(navigator.getGamepads()).filter((pad) => pad !== null);\n    }\n\n    /**\n     * helper function to test if a binding is valid\n     * @param {object} binding binding to test which includes arg & value\n     * @return {boolean}\n     */\n    isValidBinding(binding) {\n      return typeof binding.arg !== 'undefined' && (typeof binding.value === 'function' || (typeof binding.value === 'undefined' && typeof binding.expression === 'undefined'));\n    }\n  };\n}\n","import GamepadFactory from './gamepad';\nimport { ButtonNames } from './button-mapping';\n\nexport default {\n  /**\n   * install function\n   * @param {Vue} Vue\n   * @param {object} options\n   */\n  install(Vue, options = {}) {\n    // we need basic gamepad api support to work\n    if (!('getGamepads' in navigator)) {\n      console.error('vue-gamepad: your browser does not support the Gamepad API!');\n      return;\n    }\n\n    const DefaultOptions = {\n      analogThreshold: 0.5,\n      buttonNames: ButtonNames,\n      buttonRepeatTimeout: 200,\n      buttonInitialTimeout: 200,\n      injectClasses: true,\n    };\n\n    const Gamepad = GamepadFactory(Vue, { ...DefaultOptions, ...options });\n    const gamepad = new Gamepad();\n\n    /* eslint-disable no-param-reassign */\n    Vue.prototype.$gamepad = gamepad;\n\n    Vue.directive('gamepad', {\n      bind: (el, binding, vnode) => {\n        if (gamepad.isValidBinding(binding)) {\n          const callback = typeof binding.value !== 'undefined' ? binding.value : vnode.data.on.click;\n          gamepad.addListener(binding.arg, binding.modifiers, callback, vnode);\n        } else {\n          console.error(`invalid binding. '${binding.arg}' was not bound.`);\n        }\n      },\n      unbind: (el, binding, vnode) => {\n        if (gamepad.isValidBinding(binding)) {\n          const callback = typeof binding.value !== 'undefined' ? binding.value : vnode.data.on.click;\n          gamepad.removeListener(binding.arg, binding.modifiers, callback);\n        } else {\n          console.error(`invalid binding. '${binding.arg}' was not unbound.`);\n        }\n      },\n    });\n\n    Vue.directive('gamepad-layer', {\n      bind: (el, binding) => gamepad.switchToLayer(binding.value),\n      unbind: (el, binding) => gamepad.removeLayer(binding.value),\n    });\n  },\n};\n"],"names":["set","obj","keys","value","tmp","length","shift","get","def","undefined","ButtonNames","PositiveAxisNames","NegativeAxisNames","getAxisNameFromValue","axis","getAxisNames","Vue","options","holding","events","layer","layers","window","addEventListener","this","padConnected","bind","padDisconnected","animationFrame","requestAnimationFrame","run","document","body","classList","add","getGamepads","remove","event","modifiers","callback","vnode","action","released","repeat","push","injectClasses","elm","filter","e","forEach","pad","buttons","button","index","name","buttonNames","pressed","_this","now","Date","initial","buttonRepeatTimeout","buttonInitialTimeout","call","axes","analogThreshold","Array","from","navigator","binding","arg","expression","install","DefaultOptions","Gamepad","GamepadFactory","gamepad","prototype","$gamepad","directive","el","isValidBinding","data","on","click","addListener","console","error","unbind","removeListener","switchToLayer","removeLayer"],"mappings":"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"}